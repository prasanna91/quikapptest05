---
description: 
globs: 
alwaysApply: false
---
 Codemagic Multi-Platform Build Automation Prompt (for All 5 Workflows)
This build configuration supports five distinct mobile app workflows via Codemagic CI/CD using a shared variable injection approach, dynamic logic routing, and environment-sensitive scripting. The workflows are:

üß© Workflow Definitions
1. Android-Free
Entrypoint: lib/scripts/android/main.sh

Firebase: ‚ùå Disabled

Keystore: ‚ùå Not used

Output: output/android/*.apk

2. Android-Paid
Entrypoint: lib/scripts/android/main.sh

Firebase: ‚úÖ Enabled (uses firebase_config_android)

Keystore: ‚ùå Not used

Output: output/android/*.apk

3. Android-Publish
Entrypoint: lib/scripts/android/main.sh

Firebase: ‚úÖ Enabled

Keystore: ‚úÖ Enabled (uses KEY_STORE, CM_KEYSTORE_PASSWORD, CM_KEY_ALIAS, CM_KEY_PASSWORD)

Output: output/android/*.apk, output/android/*.aab

4. iOS-Only (Signed IPA)
Entrypoint: lib/scripts/ios/main.sh

Inputs Required:

CERT_CER_URL, CERT_KEY_URL (.cer and .key) ‚Üí Converted to .p12 dynamically using openssl

PROFILE_URL (.mobileprovision)

CERT_PASSWORD

Output: output/ios/*.ipa

5. Combined Android & iOS
Entrypoint: lib/scripts/combined/main.sh

Executes Android logic ‚Üí then iOS logic using conditional flags and dynamic variables

Supports All Android + iOS Inputs Above

Output: Both output/android/*.apk/.aab and output/ios/*.ipa

Push Notification (Firebase) Configuration:

Rule: The PUSH_NOTIFY flag dictates the necessity of Firebase integration.
Action:
If PUSH_NOTIFY is set to true, then Firebase integration must be enabled and configured in the build process.
If PUSH_NOTIFY is set to false, then Firebase integration is not required and should be skipped.

Rule: The KEYSTORE variable controls the Keystore setup process. Even if issues arise with Keystore configuration, the build process should not stop but instead skip the Keystore setup and continue to the next steps. Error notifications will be sent where applicable.

Action & Validation Flow (Revised for Continuity):


a.  Keystore Presence Check:
* If the KEYSTORE variable is null or empty (contains no data):
* Log/Print: "Keystore variable is empty. Skipping Keystore setup and continuing build."
* Action: Skip the entire Keystore setup process and proceed to the next build steps.

b.  Keystore Credential Validation (Pre-Check):
* If KEYSTORE contains data (implies an attempt at Keystore setup will be made), then validate the presence of all required Keystore credential variables:
* CM_KEYSTORE_PASSWORD
* CM_KEY_ALIAS
* CM_KEY_PASSWORD
* Action on Missing Credentials: If any one of these three variables is missing, null, or empty:
* Send Email Notification:
* Subject: "Alert: Android App Codesigning Skipped - Missing Keystore Credentials"
* Body: "Dear Team, One or more required Keystore credential variables (CM_KEYSTORE_PASSWORD, CM_KEY_ALIAS, CM_KEY_PASSWORD) are missing or empty. Skipping Keystore setup and Android App Codesigning. The build will continue without signing."
* Log/Print: "Missing Keystore credentials. Skipping Keystore setup and continuing build without signing."
* Action: Skip the Keystore setup process and proceed to the next build steps.

c.  Keystore Download (if URL present and credentials are valid):
* If KEYSTORE contains a valid URL AND all three credential variables are present:
* Attempt to download the Keystore file from this URL.
* Error Handling on Download Failure: If the download fails:
* Send Email Notification:
* Subject: "Alert: Android App Codesigning Skipped - Keystore Download Failed"
* Body: "Dear Team, Failed to download Keystore from the provided URL in the KEYSTORE variable. Skipping Keystore setup and Android App Codesigning. The build will continue without signing. Please check the URL and network connectivity."
* Log/Print: "Keystore download failed. Skipping Keystore setup and continuing build without signing."
* Action: Skip the Keystore setup and proceed to the next build steps.

d.  Keystore Installation (if all conditions met):
* If the KEYSTORE variable contains data (or the file was successfully downloaded from its URL) AND all three credential variables (CM_KEYSTORE_PASSWORD, CM_KEY_ALIAS, CM_KEY_PASSWORD) are present and valid, AND no download errors occurred:
* Proceed with the Keystore installation/setup. This includes injecting the Keystore properties into the build configuration for codesigning.
* Log/Print: "Keystore setup successful. Proceeding with Android App Codesigning."

e.  Generic Keystore Setup Error (Catch-all):
* If, at any point during the Keystore setup (after initial checks and before successful installation), any other unexpected error occurs:
* Send Email Notification:
* Subject: "Alert: Android App Codesigning Skipped - Keystore Setup Error"
* Body: "Dear Team, An unhandled error occurred during the Android Keystore setup. Skipping Keystore setup and Android App Codesigning. The build will continue without signing. Please review build logs for details."
* Log/Print: "Unhandled error during Keystore setup. Skipping Keystore setup and continuing build without signing."
* Action: Skip the Keystore setup and proceed to the next build steps.


üì¶ Environment Variables (Unified Format for All Workflows)

{
  "VERSION_NAME": "1.0.22",
  "VERSION_CODE": "27",
  "APP_NAME": "Garbcode App",
  "ORG_NAME": "Garbcode Apparels Private Limited",
  "WEB_URL": "https://garbcode.com/",
  "PKG_NAME": "com.garbcode.garbcodeapp",
  "BUNDLE_ID": "com.garbcode.garbcodeapp",
  "EMAIL_ID": "prasannasrinivasan32@gmail.com",
  "PUSH_NOTIFY": "true",
  "IS_CHATBOT": "true",
  "IS_DEEPLINK": "true",
  "IS_SPLASH": "true",
  "IS_PULLDOWN": "true",
  "IS_BOTTOMMENU": "false",
  "IS_LOAD_IND": "true",

  "IS_CAMERA": "false",
  "IS_LOCATION": "false",
  "IS_MIC": "true",
  "IS_NOTIFICATION": "true",
  "IS_CONTACT": "false",
  "IS_BIOMETRIC": "false",
  "IS_CALENDAR": "false",
  "IS_STORAGE": "true",

  "LOGO_URL": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/logo-gc.png",
  "SPLASH": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/logo-gc.png",
  "SPLASH_BG": "",
  "SPLASH_BG_COLOR": "#cbdbf5",
  "SPLASH_TAGLINE": "Welcome to Garbcode",
  "SPLASH_TAGLINE_COLOR": "#a30237",
  "SPLASH_ANIMATION": "zoom",
  "SPLASH_DURATION": "4",

  "BOTTOMMENU_ITEMS": "[{\"label\": \"Home\", \"icon\": \"home\", \"url\": \"https://pixaware.co/\"}, {\"label\": \"services\", \"icon\": \"services\", \"url\": \"https://pixaware.co/solutions/\"}, {\"label\": \"About\", \"icon\": \"info\", \"url\": \"https://pixaware.co/who-we-are/\"}, {\"label\": \"Contact\", \"icon\": \"phone\", \"url\": \"https://pixaware.co/lets-talk/\"}]",
  "BOTTOMMENU_BG_COLOR": "#FFFFFF",
  "BOTTOMMENU_ICON_COLOR": "#6d6e8c",
  "BOTTOMMENU_TEXT_COLOR": "#6d6e8c",
  "BOTTOMMENU_FONT": "DM Sans",
  "BOTTOMMENU_FONT_SIZE": "12",
  "BOTTOMMENU_FONT_BOLD": "false",
  "BOTTOMMENU_FONT_ITALIC": "false",
  "BOTTOMMENU_ACTIVE_TAB_COLOR": "#a30237",
  "BOTTOMMENU_ICON_POSITION": "above",
  "BOTTOMMENU_VISIBLE_ON": "home,settings,profile",

  "firebase_config_android": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/google-services (gc).json",
  "firebase_config_ios": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/GoogleService-Info-gc.plist",

  "APPLE_TEAM_ID": "9H2AD7NQ49",
  "APNS_KEY_ID": "V566SWNF69",
  "APNS_AUTH_KEY_URL": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/AuthKey_V566SWNF69.p8",

  "CERT_PASSWORD": "User@54321",
  "PROFILE_URL": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/Garbcode_App_Store.mobileprovision",
  "CERT_CER_URL": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/apple_distribution.cer",
  "CERT_KEY_URL": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/privatekey.key",
  "APP_STORE_CONNECT_KEY_IDENTIFIER": "F5229W2Q8S",

  "KEY_STORE": "https://raw.githubusercontent.com/prasanna91/QuikApp/main/keystore.jks",
  "CM_KEYSTORE_PASSWORD": "opeN@1234",
  "CM_KEY_ALIAS": "my_key_alias",
  "CM_KEY_PASSWORD": "opeN@1234"
}
‚öôÔ∏è Workflow Routing Logic (Inside Scripts)
Each script (main.sh) uses conditional logic to:

Detect workflow type via flags or env vars (e.g. IS_IOS_ONLY, USE_KEYSTORE, ENABLE_FIREBASE)

Download assets using curl or wget

Inject variables into Android Manifest, iOS plist, or environment files

Trigger builds (e.g., Gradle for Android, Xcode for iOS)

Sign apps (Keystore for Android, .p12 for iOS)

üß™ Validation Checklist
‚úÖ All workflows tested in Codemagic
‚úÖ All assets (JSON, .cer, .key, .plist, .mobileprovision) hosted on GitHub
‚úÖ .p12 file is generated on the fly from provided .cer/.key
‚úÖ Custom permissions and UI settings injected using variables
‚úÖ Compatible with both APK-only and AAB builds
‚úÖ Supports Firebase on both platforms
‚úÖ Dynamic variable routing via env or --env Codemagic flags